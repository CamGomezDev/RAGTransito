import os
import re
from dotenv import load_dotenv

from langchain.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.prompts import ChatPromptTemplate
from langchain.load import dumps, loads

from langchain_core.output_parsers import StrOutputParser
from langchain_core.tools import tool
from langchain_core.messages import SystemMessage

from langchain_openai import OpenAIEmbeddings, ChatOpenAI

from langchain_community.vectorstores import Chroma

from langgraph.graph import START, StateGraph, MessagesState, END
from langgraph.prebuilt import ToolNode, tools_condition

from .retriever_utils import get_unique_union, format_context_with_articles



def build_graph(vector_store, retriever_llm=None, generator_llm=None):
    retriever = vector_store.as_retriever()
    """
    Build and configure the graph for the chat system.
    
    Args:
        retriever_llm: LLM for retrieval (defaults to gpt-3.5-turbo)
        generator_llm: LLM for generation (defaults to gpt-4)
    """
    if retriever_llm is None:
        retriever_llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)
    
    if generator_llm is None:
        generator_llm = ChatOpenAI(model_name="gpt-4", temperature=0)


    @tool(response_format="content_and_artifact")
    def extraer(pregunta: str):
        """Extrae información relacionada a la pregunta"""
        # Multi Query: Different Perspectives
        template = (
            "Eres una IA asistente modelo de lenguaje. Tu tarea es generar cinco "
            "diferentes versiones de la pregunta dada por el usuario para extraer los "
            "documentos relevantes de una base de datos de vectores. Al generar múltiples "
            "perspectivas de la pregunta del usuario, tu objetivo es ayudar al usuario "
            "a superar algunas de las limitaciones de la búsqueda de similaridad basada "
            "en distancia. Escribe estas preguntas alternativas separadas por caracteres "
            "de nueva línea, sin enumerar ni listar. Pregunta original: {pregunta}"
        )

        prompt_perspectives = ChatPromptTemplate.from_template(template)

        generate_queries = (
            prompt_perspectives
            | retriever_llm
            | StrOutputParser()
            | (lambda x: x.split("\n"))
        )

        # retriever.map is the one that brings the list of documents most similar
        # to each of the queries generated by generate_queries

        retrieval_chain = generate_queries | retriever.map() | get_unique_union
        docs = retrieval_chain.invoke({"pregunta": pregunta})

        serialized = format_context_with_articles(docs)

        return serialized, docs
    
    tools = ToolNode([extraer])
    retriever_llm_with_tools = retriever_llm.bind_tools([extraer])
    

    def query_or_respond(state: MessagesState):
        """Generate tool call for retrieval or respond."""
        response = retriever_llm_with_tools.invoke(state["messages"])
        # MessagesState appends messages to state instead of overwriting
        return {"messages": [response]}


    def generate(state: MessagesState):
        """Generate answer."""
        # Get generated ToolMessages
        recent_tool_messages = []
        for message in reversed(state["messages"]):
            if message.type == "tool":
                recent_tool_messages.append(message)
            else:
                break
        tool_messages = recent_tool_messages[::-1]

        # Format into prompt
        docs_content = "\n\n".join(doc.content for doc in tool_messages)

        system_message_content = (
            "Eres un asistente de leyes de tránsito en Colombia. Usa las siguientes "
            "piezas de contexto extraídas para responder la pregunta. Si la respuesta "
            "no está en el contexto, di que no sabes. Da algo de detalles, mencionando "
            "el artículo en que te basaste en cada parte de la respuesta al principio "
            "de dicha parte, diciendo \"Basado en el artículo X,...\""
            "\n\n"
            "Contexto con artículos:\n\n"
            f"{docs_content}"
        )

        conversation_messages = [
            message
            for message in state["messages"]
            if message.type in ("human", "system")
            or (message.type == "ai" and not message.tool_calls)
        ]
        prompt = [SystemMessage(system_message_content)] + conversation_messages

        # Run
        response = generator_llm.invoke(prompt)
        return {"messages": [response]} 

    # Build graph
    graph_builder = StateGraph(MessagesState)
    
    # Add nodes
    graph_builder.add_node(query_or_respond)
    graph_builder.add_node(tools)
    graph_builder.add_node(generate)

    # Configure graph flow
    graph_builder.set_entry_point("query_or_respond")
    graph_builder.add_conditional_edges(
        "query_or_respond",
        tools_condition,
        {END: END, "tools": "tools"},
    )
    graph_builder.add_edge("tools", "generate")
    graph_builder.add_edge("generate", END)

    # Compile graph
    return graph_builder.compile()